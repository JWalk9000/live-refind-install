#!/bin/bash

# =============================================================================
# install-refind.sh — Install and configure rEFInd from Arch chroot environment
# Designed to run INSIDE arch-chroot after system configuration
# Assumes: ESP mounted at /boot (or /boot/efi if mounted separately)
# =============================================================================

set -euo pipefail  # Exit on errors, undefined vars, pipe failures

# Detect if running in chroot or live environment
if [[ "$(stat -c %d:%i /)" == "$(stat -c %d:%i /proc/1/root/.)" ]]; then
    # Running in live environment
    TARGET_MNT="/mnt"
    ESP_MNT="$TARGET_MNT/boot"
    echo "Detected: Running from live environment"
else
    # Running in chroot
    TARGET_MNT=""
    ESP_MNT="/boot"
    echo "Detected: Running from chroot environment"
fi

# ESP_MNT="/boot/efi"    # Uncomment if you mount ESP separately at /boot/efi

REFIND_DIR="$ESP_MNT/EFI/refind"
LOGFILE="/tmp/refind-install.log"

exec > >(tee -a "$LOGFILE") 2>&1

echo "=== Installing rEFInd to ESP ==="

# -----------------------------------------------------------------------------
# 1. Install rEFInd package
# -----------------------------------------------------------------------------
echo "Installing rEFInd package..."
pacman -S --noconfirm refind || {
    echo "Failed to install refind package."
    exit 1
}

# -----------------------------------------------------------------------------
# 2. Verify ESP is mounted
# -----------------------------------------------------------------------------
if ! findmnt -n "$ESP_MNT" > /dev/null; then
    echo "ESP is not mounted at $ESP_MNT"
    echo "Please ensure your ESP (FAT32) is mounted there."
    exit 1
fi

# Verify ESP is FAT32
ESP_FSTYPE=$(findmnt -n -o FSTYPE "$ESP_MNT")
if [[ "$ESP_FSTYPE" != "vfat" ]]; then
    echo "Warning: ESP filesystem is $ESP_FSTYPE, expected vfat (FAT32)"
    echo "This may cause boot issues. Continue anyway? (y/N)"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo "Aborted."
        exit 1
    fi
fi

echo "ESP detected at $ESP_MNT (filesystem: $ESP_FSTYPE)"

# -----------------------------------------------------------------------------
# 3. Detect root partition and filesystem
# -----------------------------------------------------------------------------
if [[ -n "$TARGET_MNT" ]]; then
    # Live environment
    ROOT_MOUNT_POINT="$TARGET_MNT"
else
    # Chroot environment
    ROOT_MOUNT_POINT="/"
fi

ROOT_DEVICE=$(findmnt -n -o SOURCE "$ROOT_MOUNT_POINT") || {
    echo "Failed to detect root device (mounted at $ROOT_MOUNT_POINT)"
    exit 1
}

ROOT_UUID=$(blkid -s UUID -o value "$ROOT_DEVICE") || {
    echo "Failed to get UUID for $ROOT_DEVICE"
    exit 1
}

ROOT_FSTYPE=$(findmnt -n -o FSTYPE "$ROOT_MOUNT_POINT")
if [ -z "$ROOT_FSTYPE" ]; then
    echo "Failed to detect filesystem type for root"
    exit 1
fi

echo "Root device: $ROOT_DEVICE"
echo "Root UUID:   $ROOT_UUID"
echo "Filesystem:  $ROOT_FSTYPE"

# -----------------------------------------------------------------------------
# 4. Detect installed kernels in /boot
# -----------------------------------------------------------------------------
KERNEL_ENTRIES=()

if [[ -n "$TARGET_MNT" ]]; then
    # Live environment - look in /mnt/boot
    BOOT_DIR="$TARGET_MNT/boot"
else
    # Chroot environment - look in /boot
    BOOT_DIR="/boot"
fi

for kernel_img in "$BOOT_DIR"/vmlinuz-*; do
    if [[ ! -f "$kernel_img" ]]; then
        continue
    fi

    KERNEL_BASENAME=$(basename "$kernel_img")
    KERNEL_NAME="${KERNEL_BASENAME#vmlinuz-}"
    INITRAMFS="initramfs-$KERNEL_NAME.img"
    FALLBACK="initramfs-$KERNEL_NAME-fallback.img"

    # Confirm initramfs exists
    if [[ ! -f "$BOOT_DIR/$INITRAMFS" ]]; then
        echo "Warning: $INITRAMFS not found!"
        continue
    fi

    KERNEL_ENTRIES+=("$KERNEL_NAME|$INITRAMFS|$FALLBACK")
done

if [ ${#KERNEL_ENTRIES[@]} -eq 0 ]; then
    echo "No Linux kernels found in $BOOT_DIR"
    echo "Did you forget to install a kernel (e.g. linux, linux-lts)?"
    exit 1
fi

echo "Found kernels: $(printf '%s ' "${KERNEL_ENTRIES[@]}")"

# -----------------------------------------------------------------------------
# 5. Create rEFInd directory and copy files
# -----------------------------------------------------------------------------
echo "Installing rEFInd to $REFIND_DIR..."

mkdir -p "$REFIND_DIR"

# Detect architecture for correct EFI binary
ARCH=$(uname -m)
case "$ARCH" in
    x86_64) EFI_BINARY="refind_x64.efi" ;;
    aarch64) EFI_BINARY="refind_aa64.efi" ;;
    *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
esac

# Copy rEFInd binaries (icons, drivers, etc.)
cp -r /usr/share/refind/refind/* "$REFIND_DIR/" || {
    echo "Failed to copy rEFInd files"
    exit 1
}

# -----------------------------------------------------------------------------
# 6. Generate refind_linux.conf
# -----------------------------------------------------------------------------
cat > "$REFIND_DIR/refind_linux.conf" <<EOF
# =============================================================================
# refind_linux.conf — Auto-generated by Arch install script
# DO NOT EDIT — This file will be overwritten on next install
# =============================================================================

# === Default boot entries for all detected kernels ===
EOF

# Loop through each kernel and generate boot stanzas
for entry in "${KERNEL_ENTRIES[@]}"; do
    IFS='|' read -r KERNEL_NAME INITRAMFS FALLBACK <<< "$entry"

    # Clean display name (e.g., "linux", "linux-lts", "linux-zen")
    KERNEL_DISPLAY_NAME="${KERNEL_NAME%%-*}"
    if [[ "$KERNEL_DISPLAY_NAME" =~ ^(linux|linux-lts|linux-zen|linux-hardened|linux-rt)$ ]]; then
        KERNEL_DISPLAY_NAME="Arch Linux ($KERNEL_NAME)"
    fi

    # Main boot line
    echo "\"Boot $KERNEL_NAME\" \"root=UUID=$ROOT_UUID rw rootfstype=$ROOT_FSTYPE quiet add_efi_memmap initrd=/$INITRAMFS\"" >> "$REFIND_DIR/refind_linux.conf"

    # Fallback initramfs entry (if exists)
    if [[ -f "$BOOT_DIR/$FALLBACK" ]]; then
        echo "\"Boot $KERNEL_NAME (fallback initramfs)\" \"root=UUID=$ROOT_UUID rw rootfstype=$ROOT_FSTYPE quiet add_efi_memmap initrd=/$FALLBACK\"" >> "$REFIND_DIR/refind_linux.conf"
    fi

    # Single-user mode
    echo "\"Boot $KERNEL_NAME (single-user)\" \"root=UUID=$ROOT_UUID rw rootfstype=$ROOT_FSTYPE add_efi_memmap initrd=/$INITRAMFS single\"" >> "$REFIND_DIR/refind_linux.conf"
done

# Add a separator and recovery note
cat >> "$REFIND_DIR/refind_linux.conf" <<EOF

# =============================================================================
# Notes:
# - UUID refers to the root filesystem UUID (not partition or ESP)
# - initrd path is relative to ESP root (since rEFInd runs from ESP)
# - 'quiet' added to reduce boot messages; remove if you want verbose output
# - 'add_efi_memmap' helps with EFI memory mapping on some systems
# =============================================================================
EOF

echo "✅ refind_linux.conf generated with ${#KERNEL_ENTRIES[@]} kernel(s)"

# -----------------------------------------------------------------------------
# 7. Register rEFInd with EFI boot manager
# -----------------------------------------------------------------------------
echo "Registering rEFInd with EFI boot manager..."

# Get ESP device and partition number
ESP_DEVICE=$(findmnt -n -o SOURCE "$ESP_MNT")
if [[ "$ESP_DEVICE" =~ ^/dev/([a-z]+)([0-9]+)$ ]]; then
    ESP_DISK="/dev/${BASH_REMATCH[1]}"
    ESP_PART="${BASH_REMATCH[2]}"
else
    echo "Warning: Could not parse ESP device $ESP_DEVICE for efibootmgr"
    echo "You may need to manually register rEFInd with:"
    echo "  efibootmgr --create --disk /dev/sdX --part N --loader /EFI/refind/$EFI_BINARY --label 'rEFInd Boot Manager'"
fi

# Register with efibootmgr if we have the device info
if [[ -n "${ESP_DISK:-}" && -n "${ESP_PART:-}" ]]; then
    if efibootmgr --create --disk "$ESP_DISK" --part "$ESP_PART" --loader "/EFI/refind/$EFI_BINARY" --label "rEFInd Boot Manager" 2>/dev/null; then
        echo "✅ rEFInd registered with EFI boot manager"
    else
        echo "⚠️  Warning: Failed to register rEFInd with efibootmgr"
        if [[ -z "$TARGET_MNT" ]]; then
            echo "   This can happen in chroot environment. rEFInd should still work."
            echo "   If needed, you can register it manually after reboot with:"
            echo "   efibootmgr --create --disk $ESP_DISK --part $ESP_PART --loader /EFI/refind/$EFI_BINARY --label 'rEFInd Boot Manager'"
        else
            echo "   You may need to manually add it from your BIOS/UEFI settings"
        fi
    fi
fi

# -----------------------------------------------------------------------------
# 8. (Optional) Create refind.conf tweaks
# -----------------------------------------------------------------------------
# If you want to customize rEFInd appearance or behavior, uncomment below:

# cat > "$REFIND_DIR/refind.conf" <<'EOF'
# # Sample refind.conf tweaks
# scanfor internal,external,cd,dvd,usb
# menu_background   background.png
# banner            banner.png
# resolution        1920 1080
# timeout           5
# hideui            hints
# showtools         shell,memtest,exit,guid
# EOF

echo "✅ rEFInd installed and configured at $REFIND_DIR"
echo "✅ EFI binary: $EFI_BINARY"
echo "✅ Boot entries created for ${#KERNEL_ENTRIES[@]} kernel(s)"
echo "✅ You can now reboot (remove ISO) and enjoy rEFInd!"

# -----------------------------------------------------------------------------
# Final notes and usage instructions
# -----------------------------------------------------------------------------
echo ""
echo "� USAGE:"
if [[ -n "$TARGET_MNT" ]]; then
    echo "   • This script can run from live environment OR chroot"
    echo "   • Currently running from: Live environment"
else
    echo "   • This script can run from live environment OR chroot"
    echo "   • Currently running from: Chroot environment"
    echo "   • Run this INSIDE arch-chroot after configuring your system"
fi
echo ""
echo "💡 TIPS:"
echo "   • If you use LUKS: Add 'cryptdevice=UUID=...:cryptroot' to kernel parameters"
echo "   • If you use ZFS: Add 'zfs=zroot/ROOT/default' (or your pool/dataset)"
echo "   • Edit $REFIND_DIR/refind_linux.conf to customize boot parameters"
echo ""   